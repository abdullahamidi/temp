name: hdf5 dev CMake special CI

# Controls when the action will run. Triggers the workflow on a call
on:
  workflow_call:

permissions:
  contents: read

# A workflow run is made up of one or more jobs that can run sequentially or
# in parallel. We just have one job, but the matrix items defined below will
# run in parallel.
jobs:
  #
  # SPECIAL CMake BUILDS
  #
  # These are not built into the matrix and instead
  # become NEW configs as their name would clobber one of the matrix
  # names (so make sure the names are UNIQUE).
  #

  build_v1_6:
    name: "gcc DBG v1.6 default API"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
           sudo apt-get update
           sudo apt-get install ninja-build doxygen graphviz
           sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
           sudo apt install gcc-12 g++-12 gfortran-12
           echo "CC=gcc-12" >> $GITHUB_ENV
           echo "CXX=g++-12" >> $GITHUB_ENV
           echo "FC=gfortran-12" >> $GITHUB_ENV
 
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=ON \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DLIBAEC_USE_LOCALCONTENT=OFF \
            -DZLIB_USE_LOCALCONTENT=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            -DHDF5_DEFAULT_API_VERSION:STRING=v16 \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Debug
        working-directory: ${{ runner.workspace }}/build

      # RUN TESTS
      - name: CMake Run Tests
        run: |
          ctest . --parallel 2 -C Debug -V -E "testhdf5-base|cache_api|dt_arith|H5TEST-dtypes|err_compat"
        working-directory: ${{ runner.workspace }}/build

      - name: CMake Run Expected to Fail Tests
        run: |
          ctest . --parallel 2 -C Debug -V -R "testhdf5-base|cache_api|dt_arith|H5TEST-dtypes|err_compat"
        working-directory: ${{ runner.workspace }}/build
        continue-on-error: true

  build_v1_8:
    name: "gcc DBG v1.8 default API"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
           sudo apt-get update
           sudo apt-get install ninja-build doxygen graphviz
           sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
           sudo apt install gcc-12 g++-12 gfortran-12
           echo "CC=gcc-12" >> $GITHUB_ENV
           echo "CXX=g++-12" >> $GITHUB_ENV
           echo "FC=gfortran-12" >> $GITHUB_ENV
 
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=ON \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DLIBAEC_USE_LOCALCONTENT=OFF \
            -DZLIB_USE_LOCALCONTENT=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            -DHDF5_DEFAULT_API_VERSION:STRING=v18 \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Debug
        working-directory: ${{ runner.workspace }}/build

      #
      # RUN TESTS
      #
      - name: CMake Run Tests
        run: ctest . --parallel 2 -C Debug -V
        working-directory: ${{ runner.workspace }}/build

  build_v1_10:
    name: "gcc DBG v1.10 default API"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
           sudo apt-get update
           sudo apt-get install ninja-build doxygen graphviz
           sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
           sudo apt install gcc-12 g++-12 gfortran-12
           echo "CC=gcc-12" >> $GITHUB_ENV
           echo "CXX=g++-12" >> $GITHUB_ENV
           echo "FC=gfortran-12" >> $GITHUB_ENV
 
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=ON \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DLIBAEC_USE_LOCALCONTENT=OFF \
            -DZLIB_USE_LOCALCONTENT=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            -DHDF5_DEFAULT_API_VERSION:STRING=v110 \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Debug
        working-directory: ${{ runner.workspace }}/build

      #
      # RUN TESTS
      #
      - name: CMake Run Tests
        run: ctest . --parallel 2 -C Debug -V
        working-directory: ${{ runner.workspace }}/build

  build_v1_12:
    name: "gcc DBG v1.12 default API"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
           sudo apt-get update
           sudo apt-get install ninja-build doxygen graphviz
           sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
           sudo apt install gcc-12 g++-12 gfortran-12
           echo "CC=gcc-12" >> $GITHUB_ENV
           echo "CXX=g++-12" >> $GITHUB_ENV
           echo "FC=gfortran-12" >> $GITHUB_ENV
 
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=ON \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DLIBAEC_USE_LOCALCONTENT=OFF \
            -DZLIB_USE_LOCALCONTENT=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            -DHDF5_DEFAULT_API_VERSION:STRING=v112 \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Debug
        working-directory: ${{ runner.workspace }}/build

      # RUN TESTS
      - name: CMake Run Tests
        run: ctest . --parallel 2 -C Debug -V
        working-directory: ${{ runner.workspace }}/build

  build_v1_14:
    name: "gcc DBG v1.14 default API"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build doxygen graphviz
          sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
          sudo apt install gcc-12 g++-12 gfortran-12
          echo "CC=gcc-12" >> $GITHUB_ENV
          echo "CXX=g++-12" >> $GITHUB_ENV
          echo "FC=gfortran-12" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=ON \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DLIBAEC_USE_LOCALCONTENT=OFF \
            -DZLIB_USE_LOCALCONTENT=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            -DHDF5_DEFAULT_API_VERSION:STRING=v114 \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Debug
        working-directory: ${{ runner.workspace }}/build

      # RUN TESTS
      - name: CMake Run Tests
        run: ctest . --parallel 2 -C Debug -V
        working-directory: ${{ runner.workspace }}/build

  build_v2_0_linux:
    name: "gcc DBG v2.0.0 default API no deprecated"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build doxygen graphviz
          sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
          sudo apt install gcc-12 g++-12 gfortran-12
          echo "CC=gcc-12" >> $GITHUB_ENV
          echo "CXX=g++-12" >> $GITHUB_ENV
          echo "FC=gfortran-12" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=ON \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DLIBAEC_USE_LOCALCONTENT=OFF \
            -DZLIB_USE_LOCALCONTENT=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            -DHDF5_ENABLE_DEPRECATED_SYMBOLS:BOOL=OFF \
            -DHDF5_DEFAULT_API_VERSION:STRING=v200 \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Debug
        working-directory: ${{ runner.workspace }}/build

      # RUN TESTS
      - name: CMake Run Tests
        run: ctest . --parallel 2 -C Debug -V
        working-directory: ${{ runner.workspace }}/build

  build_v2_0_win:
    name: "Intel DBG v2.0.0 default API no deprecated"
    runs-on: windows-latest
    steps:
      # SETUP
      - name: Install Dependencies (Windows)
        run: choco install ninja

      - name: Install Dependencies
        uses: ssciwr/doxygen-install@v1
        with:
          version: "1.13.2"

      - name: install oneAPI (Windows)
        uses: fortran-lang/setup-fortran@v1
        id: setup-fortran
        with:
          compiler: intel
          version: '2025.0'

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      - name: CMake Configure (Windows)
        shell: pwsh
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
        run: |
          mkdir "${{ runner.workspace }}/build"
          Set-Location -Path "${{ runner.workspace }}\\build"
          cmake -C ${{ github.workspace }}/config/cmake/cacheinit.cmake -G Ninja -DCMAKE_BUILD_TYPE=Debug -DBUILD_SHARED_LIBS=ON -DHDF5_ENABLE_ALL_WARNINGS=ON -DHDF5_ENABLE_PARALLEL:BOOL=OFF -DHDF5_BUILD_CPP_LIB:BOOL=ON -DHDF5_BUILD_FORTRAN=ON -DHDF5_BUILD_JAVA=ON -DHDF5_BUILD_DOC=OFF -DLIBAEC_USE_LOCALCONTENT=OFF -DZLIB_USE_LOCALCONTENT=OFF -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON -DHDF5_ENABLE_DIRECT_VFD:BOOL=OFF -DHDF5_ENABLE_DEPRECATED_SYMBOLS:BOOL=OFF -DHDF5_DEFAULT_API_VERSION:STRING=v200 ${{ github.workspace }}

      - name: CMake Build (Windows)
        shell: pwsh
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
        run: |
          cmake --build . --parallel 3 --config Debug
        working-directory: ${{ runner.workspace }}/build

      - name: CMake Run Tests (Windows)
        shell: pwsh
        env:
          FC: ${{ steps.setup-fortran.outputs.fc }}
          CC: ${{ steps.setup-fortran.outputs.cc }}
        run: |
          ctest . --parallel 2 -C Debug -V
        working-directory: ${{ runner.workspace }}/build

  build_system_zlib:
    name: "gcc system zlib"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build doxygen graphviz
          sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
          sudo apt install gcc-12 g++-12 gfortran-12 zlib1g-dev 
          echo "CC=gcc-12" >> $GITHUB_ENV
          echo "CXX=g++-12" >> $GITHUB_ENV
          echo "FC=gfortran-12" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            --log-level=VERBOSE \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS:BOOL=ON \
            -DHDF5_ENABLE_ALL_WARNINGS:BOOL=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN:BOOL=ON \
            -DHDF5_BUILD_JAVA:BOOL=ON \
            -DHDF5_BUILD_DOC:BOOL=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            -DHDF5_ALLOW_EXTERNAL_SUPPORT:STRING="NO" \
            -DHDF5_ENABLE_ZLIB_SUPPORT:BOOL=ON \
            -DZLIB_USE_LOCALCONTENT:BOOL=OFF \
            -DZLIB_USE_EXTERNAL:BOOL=OFF \
            -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=OFF \
            -DHDF5_ENABLE_SZIP_ENCODING:BOOL=OFF \
            -DLIBAEC_USE_LOCALCONTENT:BOOL=OFF \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Debug
        working-directory: ${{ runner.workspace }}/build

      # RUN TESTS
      - name: CMake Run Tests
        run: ctest . --parallel 2 -C Debug -V
        working-directory: ${{ runner.workspace }}/build

  build_zlibng:
    name: "gcc use zlib-ng filter"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build doxygen graphviz
          sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
          sudo apt install gcc-12 g++-12 gfortran-12
          echo "CC=gcc-12" >> $GITHUB_ENV
          echo "CXX=g++-12" >> $GITHUB_ENV
          echo "FC=gfortran-12" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            --log-level=VERBOSE \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=ON \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DLIBAEC_USE_LOCALCONTENT=OFF \
            -DZLIB_USE_LOCALCONTENT=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            -DHDF5_USE_ZLIB_NG:BOOL=ON \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Release
        working-directory: ${{ runner.workspace }}/build

      # RUN TESTS
      - name: CMake Run Tests
        run: ctest . --parallel 2 -C Release -V
        working-directory: ${{ runner.workspace }}/build

  build_nofilter:
    name: "gcc no filters"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build doxygen graphviz
          sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
          sudo apt install gcc-12 g++-12 gfortran-12
          echo "CC=gcc-12" >> $GITHUB_ENV
          echo "CXX=g++-12" >> $GITHUB_ENV
          echo "FC=gfortran-12" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            --log-level=VERBOSE \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=ON \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            -DHDF5_ENABLE_ZLIB_SUPPORT:BOOL=OFF \
            -DHDF5_ENABLE_SZIP_SUPPORT:=BOOL=OFF \
            -DHDF5_ENABLE_SZIP_ENCODING:=BOOL=OFF \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Release
        working-directory: ${{ runner.workspace }}/build

      # RUN TESTS
      - name: CMake Run Tests
        run: ctest . --parallel 2 -C Release -V
        working-directory: ${{ runner.workspace }}/build

  build_debug_werror:
    name: "gcc DBG -Werror (build only)"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
           sudo apt-get update
           sudo apt-get install ninja-build doxygen graphviz
           sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
           sudo apt install gcc-12 g++-12 gfortran-12
           echo "CC=gcc-12" >> $GITHUB_ENV
           echo "CXX=g++-12" >> $GITHUB_ENV
           echo "FC=gfortran-12" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            --log-level=VERBOSE \
            -DCMAKE_BUILD_TYPE=Debug \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_WARNINGS_AS_ERRORS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=OFF \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DLIBAEC_USE_LOCALCONTENT=OFF \
            -DZLIB_USE_LOCALCONTENT=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Release
        working-directory: ${{ runner.workspace }}/build

  build_release_werror:
    name: "gcc REL -Werror (build only)"
    runs-on: ubuntu-latest
    steps:
      # SETUP
      - name: Install Linux Dependencies
        run: |
           sudo apt-get update
           sudo apt-get install ninja-build doxygen graphviz
           sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
           sudo apt install gcc-12 g++-12 gfortran-12
           echo "CC=gcc-12" >> $GITHUB_ENV
           echo "CXX=g++-12" >> $GITHUB_ENV
           echo "FC=gfortran-12" >> $GITHUB_ENV

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Get Sources
        uses: actions/checkout@v4.1.7

      # CMAKE CONFIGURE
      - name: CMake Configure
        run: |
          mkdir "${{ runner.workspace }}/build"
          cd "${{ runner.workspace }}/build"
          cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
            -G Ninja \
            --log-level=VERBOSE \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SHARED_LIBS=ON \
            -DHDF5_ENABLE_ALL_WARNINGS=ON \
            -DHDF5_ENABLE_WARNINGS_AS_ERRORS=ON \
            -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
            -DHDF5_BUILD_CPP_LIB:BOOL=ON \
            -DHDF5_BUILD_FORTRAN=ON \
            -DHDF5_BUILD_JAVA=ON \
            -DHDF5_BUILD_DOC=OFF \
            -DLIBAEC_USE_LOCALCONTENT=OFF \
            -DZLIB_USE_LOCALCONTENT=OFF \
            -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
            -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
            $GITHUB_WORKSPACE
        shell: bash

      # BUILD
      - name: CMake Build
        run: cmake --build . --parallel 3 --config Release
        working-directory: ${{ runner.workspace }}/build

  test-cmake-minimum:
    runs-on: ubuntu-latest
    steps:
    - name: Install Linux Dependencies
      run: |
         sudo apt-get update
         sudo apt-get install ninja-build doxygen graphviz
         sudo apt install libssl3 libssl-dev libcurl4 libcurl4-openssl-dev
         sudo apt install gcc-12 g++-12 gfortran-12
         echo "CC=gcc-12" >> $GITHUB_ENV
         echo "CXX=g++-12" >> $GITHUB_ENV
         echo "FC=gfortran-12" >> $GITHUB_ENV

    - uses: lukka/get-cmake@latest
      with:
        cmakeVersion: 3.18

    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Get Sources
      uses: actions/checkout@v4.1.7

    # CMAKE CONFIGURE
    - name: CMake Configure
      run: |
        mkdir "${{ runner.workspace }}/build"
        cd "${{ runner.workspace }}/build"
        cmake -C $GITHUB_WORKSPACE/config/cmake/cacheinit.cmake \
          -G Ninja \
          --log-level=VERBOSE \
          -DCMAKE_BUILD_TYPE=Debug \
          -DBUILD_SHARED_LIBS=ON \
          -DHDF5_ENABLE_ALL_WARNINGS=ON \
          -DHDF5_ENABLE_WARNINGS_AS_ERRORS=ON \
          -DHDF5_ENABLE_PARALLEL:BOOL=OFF \
          -DHDF5_BUILD_CPP_LIB:BOOL=ON \
          -DHDF5_BUILD_FORTRAN=OFF \
          -DHDF5_BUILD_JAVA=ON \
          -DHDF5_BUILD_DOC=OFF \
          -DLIBAEC_USE_LOCALCONTENT=OFF \
          -DZLIB_USE_LOCALCONTENT=OFF \
          -DHDF5_ENABLE_MIRROR_VFD:BOOL=ON \
          -DHDF5_ENABLE_DIRECT_VFD:BOOL=ON \
          $GITHUB_WORKSPACE
      shell: bash

    # BUILD
    - name: CMake Build
      run: cmake --build . --parallel 3 --config Release
      working-directory: ${{ runner.workspace }}/build

