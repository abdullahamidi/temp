name: hdf5 dev parallel from source ctest script runs

# Triggers the workflow on a call from another workflow
on:
  workflow_call:
    inputs:
      snap_name:
        description: 'The name in the source tarballs'
        type: string
        required: false
        default: hdfsrc
      file_base:
        description: "The common base name of the source tarballs"
        required: true
        type: string
      use_environ:
        description: 'Environment to locate files'
        type: string
        required: true
        default: snapshots
      build_mode:
        description: "release vs. debug build"
        required: true
        type: string

permissions:
  contents: read

jobs:
  Build_openmpi_source:
    name: Build OpenMPI from source
    uses: ./.github/workflows/build_openmpi_source.yml
    with:
      build_mode: ${{ inputs.build_mode }}

  Build_mpich_source:
    name: Build MPICH from source
    uses: ./.github/workflows/build_mpich_source.yml
    with:
      build_mode: ${{ inputs.build_mode }}

  CMake_build_parallel_src_openmpi:
    needs: Build_openmpi_source
    name: "Parallel OpenMPI GCC-${{ inputs.build_mode }}"
    runs-on: ubuntu-latest
    steps:
      - name: Install Linux Dependencies (OpenMPI)
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          sudo apt install libaec0 libaec-dev

      - name: Get MPI installation (OpenMPI)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: openmpi

      - name: Untar MPI installation (OpenMPI)
        run: |
          tar xvf openmpi.tar -C ${{ runner.workspace }}

      - name: Set path (OpenMPI)
        shell: bash
        run: |
          echo "${{ runner.workspace }}/openmpi/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=${{ runner.workspace }}/openmpi/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CC=${{ runner.workspace }}/openmpi/bin/mpicc" >> $GITHUB_ENV
          echo "FC=${{ runner.workspace }}/openmpi/bin/mpif90" >> $GITHUB_ENV

      - name: Install Doxygen
        uses: ssciwr/doxygen-install@v1
        with:
          version: "1.13.2"

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.31.6'

      - name: Set file base name (OpenMPI)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT

      # Get files created by release script
      - name: Get tgz-tarball (OpenMPI)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
              name: tgz-tarball
              path: ${{ github.workspace }}

      - name: List files for the space (OpenMPI)
        run: |
            ls -l ${{ github.workspace }}
            ls ${{ runner.workspace }}

      - name: Uncompress source (OpenMPI)
        run: tar -zxvf ${{ github.workspace }}/${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz

      - name: Copy script files for the space (OpenMPI)
        run: |
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/scripts/CTestScript.cmake ${{ runner.workspace }}/hdf5
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/scripts/HDF5config.cmake ${{ runner.workspace }}/hdf5

      - name: List files for the hdf5 (OpenMPI)
        run: |
            ls ${{ runner.workspace }}/hdf5

      - name: Create options file (OpenMPI)
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ${{ runner.workspace }}/hdf5/HDF5options.cmake
          write-mode: overwrite
          contents: |
            set (CTEST_DROP_SITE_INIT "my.cdash.org")
            # Change following line to submit to your CDash dashboard to a different CDash project
            #set (CTEST_DROP_LOCATION_INIT "/submit.php?project=HDF5")
            set (SITE_BUILDNAME_SUFFIX "${{ steps.set-file-base.outputs.FILE_BASE }}")
            set (ctest_test_args INCLUDE MPI_TEST)
            set (MODEL "MPI")
            set (GROUP "MPI")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} --log-level=VERBOSE")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DMPIEXEC_NUMPROC_FLAG:STRING=-n")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DMPIEXEC_MAX_NUMPROCS:STRING=2")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_PARALLEL:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_SUBFILING_VFD:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_BUILD_JAVA:BOOL=OFF")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_BUILD_CPP_LIB:BOOL=OFF")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_BUILD_FORTRAN:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_ZLIB_SUPPORT:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_SZIP_ENCODING:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_PLUGIN_SUPPORT:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DLIBAEC_USE_LOCALCONTENT:BOOL=OFF")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DZLIB_USE_LOCALCONTENT:BOOL=OFF")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DPLUGIN_USE_LOCALCONTENT:BOOL=OFF")

      - name: Run ctest script (OpenMPI)
        run: |
          cd "${{ runner.workspace }}/hdf5"
          ctest -S HDF5config.cmake,CTEST_SITE_EXT=GH-${{ github.event.repository.full_name }}-OpenMPI-source,LOCAL_SUBMIT=ON,NINJA=TRUE,BUILD_GENERATOR=Unix,CTEST_SOURCE_NAME=${{ steps.set-file-base.outputs.SOURCE_BASE }} -C ${{ inputs.build_mode }} -VV -O hdf5.log
        shell: bash
        continue-on-error: true

      # Save log files created by ctest script
      - name: Save log (OpenMPI)
        uses: actions/upload-artifact@v4
        with:
          name: openmpi-log
          path: ${{ runner.workspace }}/hdf5/hdf5.log
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`

  CMake_build_parallel_src_mpich:
    needs: Build_mpich_source
    name: "Parallel Mpich GCC-${{ inputs.build_mode }}"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.7

      - name: Install Linux Dependencies (MPICH)
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build
          sudo apt install libaec0 libaec-dev

      - name: Get MPI installation (MPICH)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
          name: mpich

      - name: Untar MPI installation (MPICH)
        run: |
          tar xvf mpich.tar -C ${{ runner.workspace }}

      - name: Set path (MPICH)
        shell: bash
        run: |
          echo "${{ runner.workspace }}/mpich/bin" >> $GITHUB_PATH
          echo "LD_LIBRARY_PATH=${{ runner.workspace }}/mpich/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "CC=${{ runner.workspace }}/mpich/bin/mpicc" >> $GITHUB_ENV
          echo "FC=${{ runner.workspace }}/mpich/bin/mpif90" >> $GITHUB_ENV

      - name: Install Doxygen
        uses: ssciwr/doxygen-install@v1
        with:
          version: "1.13.2"

      - name: Install CMake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.31.6'

      - name: Set file base name (MPICH)
        id: set-file-base
        run: |
          FILE_NAME_BASE=$(echo "${{ inputs.file_base }}")
          echo "FILE_BASE=$FILE_NAME_BASE" >> $GITHUB_OUTPUT
          if [[ '${{ inputs.use_environ }}' == 'release' ]]
          then
            SOURCE_NAME_BASE=$(echo "${{ inputs.snap_name }}")
          else
            SOURCE_NAME_BASE=$(echo "hdfsrc")
          fi
          echo "SOURCE_BASE=$SOURCE_NAME_BASE" >> $GITHUB_OUTPUT

      # Get files created by release script
      - name: Get tgz-tarball (MPICH)
        uses: actions/download-artifact@d3f86a106a0bac45b974a628896c90dbdf5c8093 # v4.3.0
        with:
              name: tgz-tarball
              path: ${{ github.workspace }}

      - name: List files for the space (MPICH)
        run: |
            ls -l ${{ github.workspace }}
            ls ${{ runner.workspace }}

      - name: Uncompress source (MPICH)
        run: tar -zxvf ${{ github.workspace }}/${{ steps.set-file-base.outputs.FILE_BASE }}.tar.gz

      - name: Copy script files for the space (MPICH)
        run: |
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/scripts/CTestScript.cmake ${{ runner.workspace }}/hdf5
          cp ${{ github.workspace }}/${{ steps.set-file-base.outputs.SOURCE_BASE }}/config/cmake/scripts/HDF5config.cmake ${{ runner.workspace }}/hdf5

      - name: List files for the hdf5 (MPICH)
        run: |
            ls ${{ runner.workspace }}/hdf5

      - name: Create options file (MPICH)
        uses: "DamianReeves/write-file-action@master"
        with:
          path: ${{ runner.workspace }}/hdf5/HDF5options.cmake
          write-mode: overwrite
          contents: |
            set (CTEST_DROP_SITE_INIT "my.cdash.org")
            # Change following line to submit to your CDash dashboard to a different CDash project
            #set (CTEST_DROP_LOCATION_INIT "/submit.php?project=HDF5")
            set (SITE_BUILDNAME_SUFFIX "${{ steps.set-file-base.outputs.FILE_BASE }}")
            set (ctest_test_args INCLUDE MPI_TEST)
            set (MODEL "MPI")
            set (GROUP "MPI")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} --log-level=VERBOSE")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DMPIEXEC_NUMPROC_FLAG:STRING=-n")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DMPIEXEC_MAX_NUMPROCS:STRING=2")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_PARALLEL:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_SUBFILING_VFD:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_BUILD_JAVA:BOOL=OFF")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_BUILD_CPP_LIB:BOOL=OFF")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_BUILD_FORTRAN:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_ZLIB_SUPPORT:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_SZIP_SUPPORT:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_SZIP_ENCODING:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DHDF5_ENABLE_PLUGIN_SUPPORT:BOOL=ON")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DLIBAEC_USE_LOCALCONTENT:BOOL=OFF")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DZLIB_USE_LOCALCONTENT:BOOL=OFF")
            set (ADD_BUILD_OPTIONS "${ADD_BUILD_OPTIONS} -DPLUGIN_USE_LOCALCONTENT:BOOL=OFF")

      - name: Run ctest script (MPICH)
        run: |
          cd "${{ runner.workspace }}/hdf5"
          ctest -S HDF5config.cmake,CTEST_SITE_EXT=GH-${{ github.event.repository.full_name }}-MPICH-source,LOCAL_SUBMIT=ON,NINJA=TRUE,BUILD_GENERATOR=Unix,CTEST_SOURCE_NAME=${{ steps.set-file-base.outputs.SOURCE_BASE }} -C ${{ inputs.build_mode }} -VV -O hdf5.log
        shell: bash
        continue-on-error: true

      # Save log files created by ctest script
      - name: Save log (MPICH)
        uses: actions/upload-artifact@v4
        with:
          name: mpich-log
          path: ${{ runner.workspace }}/hdf5/hdf5.log
          if-no-files-found: error # 'warn' or 'ignore' are also available, defaults to `warn`
