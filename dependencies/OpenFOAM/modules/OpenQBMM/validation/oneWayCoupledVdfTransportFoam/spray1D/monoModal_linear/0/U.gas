/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U.fluid;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   #codeStream
{
    codeInclude
    #{
        #include "fvCFD.H"
        #include "constants.H"
    #};

    codeOptions
    #{
        -I$(LIB_SRC)/OpenFOAM/lnInclude \
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    code
    #{
        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());

        const vectorField& points = mesh.C();
        scalar z0 = 0.1;
        scalar V0 = 5.0;
        vectorField u(mesh.nCells());

        forAll (points, celli)
        {
            scalar x = points[celli].x();
            scalar y = points[celli].y();
            u[celli] =
                vector
                (
                    sqr(z0/x)*V0,
                    cos(0.1)*y*sqr(z0/x)*V0/x,
                    0.0
                );
        }
        os  << "nonuniform " << u;
    #};
};

boundaryField
{
    inlet
    {
        type            codedFixedValue;
        value           uniform (0 0 0);
        name            sprayVelocity;
        code
        #{
            const vectorField& points = this->patch().Cf();
            scalar z0 = 0.1;
            scalar V0 = 5.0;
            vectorField u(points.size());
            forAll (points, celli)
            {
                scalar x = points[celli].x();
                scalar y = points[celli].y();
                u[celli] =
                    vector
                    (
                        sqr(z0/x)*V0,
                        cos(0.1)*y*sqr(z0/x)*V0/x,
                        0.0
                    );
            }
            operator==(u);
        #};
    }

    outlet
    {
        type            zeroGradient;
    }

    wedge1
    {
        type            wedge;
    }
    wedge2
    {
        type            wedge;
    }

    top
    {
        type            zeroGradient;
    }

    axis
    {
        type            empty;
    }
}

// ************************************************************************* //
