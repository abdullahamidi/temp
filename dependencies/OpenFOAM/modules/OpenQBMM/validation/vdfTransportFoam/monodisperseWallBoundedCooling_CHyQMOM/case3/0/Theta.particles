/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  dev
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volScalarField;
    location    "0";
    object      Theta.particles;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 2 -2 0 0 0 0];

internalField   #codeStream
{
    codeInclude
    #{
        #include "fvCFD.H"
        #include "constants.H"
    #};

    codeOptions
    #{
        -I$(LIB_SRC)/OpenFOAM/lnInclude \
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    code
    #{
        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());

        const vectorField& points = mesh.C();
        scalarField theta(mesh.nCells());
        scalar leftT = 2.0/3.0;
        scalar rightT = 2.0/3.0;
        scalar minX = min(points.component(0));
        scalar maxX = max(points.component(0));

        forAll (points, celli)
        {
            scalar x = points[celli].x();
            theta[celli] =
                leftT + (rightT - leftT)*(x - minX)/(maxX - minX);
        }
        os  << "nonuniform " << theta;
    #};
};

boundaryField
{
    top
    {
        type    cyclic;
    }
    bottom
    {
        type    cyclic;
    }
    left
    {
        type    calculated;
        value   uniform 0.6667;
    }
    right
    {
        type    calculated;
        value   uniform 0.6667;
    }
    front
    {
        type    empty;
    }
    back
    {
        type    empty;
    }
}


// ************************************************************************* //
